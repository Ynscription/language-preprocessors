
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon May 06 19:30:20 CEST 2019
//----------------------------------------------------

package ascending.eval;

import java_cup.runtime.*;
import ascending.lexical.Lexer;
import ascending.lexical.LexicalClass;
import ascending.lexical.LexicalUnit;
import abstractSyntax.Builder;
import abstractSyntax.*;
import abstractSyntax.expressions.*;
import abstractSyntax.expressions.binary.*;
import abstractSyntax.expressions.unary.*;
import ascending.error.ErrorManager;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon May 06 19:30:20 CEST 2019
  */
public class Eval extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Eval() {super();}

  /** Constructor which sets the default scanner. */
  public Eval(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Eval(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\005\004\000\002\005\004" +
    "\000\002\004\005\000\002\004\003\000\002\006\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\006\004\004\005\007\001\002\000\004\013" +
    "\070\001\002\000\006\006\013\007\014\001\002\000\004" +
    "\002\012\001\002\000\004\013\011\001\002\000\006\006" +
    "\ufffe\007\ufffe\001\002\000\006\006\ufffc\007\ufffc\001\002" +
    "\000\004\002\000\001\002\000\006\004\004\005\007\001" +
    "\002\000\004\013\017\001\002\000\006\002\001\006\065" +
    "\001\002\000\006\002\ufffa\006\ufffa\001\002\000\004\010" +
    "\020\001\002\000\016\011\033\013\026\014\023\015\025" +
    "\017\022\024\024\001\002\000\012\002\ufff9\006\ufff9\016" +
    "\036\017\041\001\002\000\016\011\033\013\026\014\023" +
    "\015\025\017\022\024\024\001\002\000\040\002\uffec\006" +
    "\uffec\012\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\001\002\000\012\011\033\013\026\014\023\015\025" +
    "\001\002\000\040\002\uffeb\006\uffeb\012\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\001\002\000\040\002" +
    "\uffea\006\uffea\012\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\001\002\000\040\002\uffed\006\uffed\012\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\001\002" +
    "\000\040\002\ufff0\006\ufff0\012\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\001\002\000\040\002\ufff2\006" +
    "\ufff2\012\ufff2\016\ufff2\017\ufff2\020\054\021\050\022\ufff2" +
    "\023\ufff2\025\053\026\057\027\055\030\051\031\052\032" +
    "\056\001\002\000\020\002\ufff4\006\ufff4\012\ufff4\016\ufff4" +
    "\017\ufff4\022\043\023\044\001\002\000\016\011\033\013" +
    "\026\014\023\015\025\017\022\024\024\001\002\000\014" +
    "\002\ufff7\006\ufff7\012\ufff7\016\ufff7\017\ufff7\001\002\000" +
    "\010\012\040\016\036\017\041\001\002\000\016\011\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\017\uffe8\024\uffe8\001\002\000" +
    "\016\011\033\013\026\014\023\015\025\017\022\024\024" +
    "\001\002\000\040\002\uffe9\006\uffe9\012\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000\016\011" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\024\uffe7\001\002" +
    "\000\014\002\ufff8\006\ufff8\012\ufff8\016\ufff8\017\ufff8\001" +
    "\002\000\016\011\033\013\026\014\023\015\025\017\022" +
    "\024\024\001\002\000\016\011\033\013\026\014\023\015" +
    "\025\017\022\024\024\001\002\000\014\002\ufff5\006\ufff5" +
    "\012\ufff5\016\ufff5\017\ufff5\001\002\000\014\002\ufff6\006" +
    "\ufff6\012\ufff6\016\ufff6\017\ufff6\001\002\000\016\011\033" +
    "\013\026\014\023\015\025\017\022\024\024\001\002\000" +
    "\016\011\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\024\uffdf" +
    "\001\002\000\016\011\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\024\uffe1\001\002\000\016\011\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\017\uffe5\024\uffe5\001\002\000\016\011\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\017\uffe4\024\uffe4\001\002\000\016" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\024\uffe0\001" +
    "\002\000\016\011\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\024\uffe2\001\002\000\016\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\017\uffe6\024\uffe6\001\002\000\016\011\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\017\uffe3\024\uffe3\001\002\000\016\011" +
    "\033\013\026\014\023\015\025\017\022\024\024\001\002" +
    "\000\040\002\ufff1\006\ufff1\012\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\001\002\000\024\002\ufff3\006" +
    "\ufff3\012\ufff3\016\ufff3\017\ufff3\020\054\021\050\022\ufff3" +
    "\023\ufff3\001\002\000\040\002\uffee\006\uffee\012\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\001\002\000" +
    "\040\002\uffef\006\uffef\012\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\001\002\000\004\013\017\001\002" +
    "\000\006\002\ufffb\006\ufffb\001\002\000\006\006\uffff\007" +
    "\uffff\001\002\000\006\006\ufffd\007\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\010\002\005\003\004\005\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\066\001\001\000\006\004\014\006\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\020\010\033\011\031\012\030\013\027" +
    "\014\026\001\001\000\004\015\036\001\001\000\006\013" +
    "\063\014\026\001\001\000\002\001\001\000\004\014\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\046\017\057\001\001" +
    "\000\002\001\001\000\016\007\034\010\033\011\031\012" +
    "\030\013\027\014\026\001\001\000\002\001\001\000\004" +
    "\015\036\001\001\000\002\001\001\000\014\010\041\011" +
    "\031\012\030\013\027\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\045\011" +
    "\031\012\030\013\027\014\026\001\001\000\012\011\044" +
    "\012\030\013\027\014\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\061\013\027\014\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\060\014\026\001" +
    "\001\000\002\001\001\000\004\017\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s = getScanner().next_token();
	  System.out.println(((LexicalUnit)s).toString());
	  return  s;

    }


	public void syntax_error(Symbol lex_unit) {
		ErrorManager.syntaxError((LexicalUnit) lex_unit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final Eval parser;

  /** Constructor */
  CUP$parser$actions(Eval parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= LDs SECTION_SEPARATOR LIs 
            {
              Program RESULT =null;
		//Location ldsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location ldsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LD lds = (LD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location lisxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location lisxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LI lis = (LI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.prog(lds, lis); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		//Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LDs ::= LDs SEMICOLON D 
            {
              LD RESULT =null;
		//Location ldsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location ldsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LD lds = (LD)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LDSimp dec = (LDSimp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.ldCompuesta(dec.tipoVar(), dec.id(), lds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDs ::= D 
            {
              LD RESULT =null;
		//Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LDSimp dec = (LDSimp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.ldSimple(dec.tipoVar(), dec.id()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= NUM IDENTIFIER 
            {
              LDSimp RESULT =null;
		//Location identificadorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location identificadorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LDSimp("num", identificador); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= BOOL IDENTIFIER 
            {
              LDSimp RESULT =null;
		//Location identificadorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location identificadorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LDSimp("bool", identificador); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIs ::= LIs SEMICOLON I 
            {
              LI RESULT =null;
		//Location lisxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location lisxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LI lis = (LI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location instxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location instxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LISimp inst = (LISimp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.liCompuesta(inst.id(), inst.exp(), lis); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIs ::= I 
            {
              LI RESULT =null;
		//Location instxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location instxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LISimp inst = (LISimp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.liSimple(inst.id(), inst.exp()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= IDENTIFIER ASSIGNMENT Exp0 
            {
              LISimp RESULT =null;
		//Location identificadorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location identificadorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LISimp(identificador, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp0 ::= Exp0 Op0 Exp1 
            {
              Exp RESULT =null;
		//Location exp0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location exp0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location op0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location op0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String op0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.mkexp(op0, exp0, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp0 ::= Exp1 
            {
              Exp RESULT =null;
		//Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp1 ::= Exp2 OP_AND Exp1 
            {
              Exp RESULT =null;
		//Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.and(exp2, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp1 ::= Exp2 OP_OR Exp2 
            {
              Exp RESULT =null;
		//Location exp20xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location exp20xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp exp20 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location exp21xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp21xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp21 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.or(exp20, exp21); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp1 ::= Exp2 
            {
              Exp RESULT =null;
		//Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp2 ::= Exp3 Op2 Exp3 
            {
              Exp RESULT =null;
		//Location exp30xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location exp30xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp exp30 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location op2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location op2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//Location exp31xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp31xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp31 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.mkexp(op2, exp30, exp31); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp2 ::= Exp3 
            {
              Exp RESULT =null;
		//Location exp3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Exp RESULT =null;
		//Location exp3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		//Location exp3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Location op3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location op3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//Location exp4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.mkexp(op3, exp3, exp4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp3 ::= Exp4 
            {
              Exp RESULT =null;
		//Location exp4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp4 ::= OP_SUB Exp4 
            {
              Exp RESULT =null;
		//Location exp4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp4 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.menosUn(exp4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp4 ::= OP_NOT Exp5 
            {
              Exp RESULT =null;
		//Location exp5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.not(exp5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp4 ::= Exp5 
            {
              Exp RESULT =null;
		//Location exp5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location exp5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp exp5 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp5; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp5 ::= LITERAL_NUMBER 
            {
              Exp RESULT =null;
		//Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.num(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp5 ::= BOOLEAN_VALUE 
            {
              Exp RESULT =null;
		//Location boolxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location boolxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String bool = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.bool(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp5 ::= IDENTIFIER 
            {
              Exp RESULT =null;
		//Location identificadorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location identificadorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Builder.id(identificador); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp5 ::= OPEN_PARENTHESIS Exp0 CLOSE_PARENTHESIS 
            {
              Exp RESULT =null;
		//Location exp0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location exp0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op0 ::= OP_ADD 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Op0 ::= OP_SUB 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Op2 ::= OP_DIFFERENT 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op2 ::= OP_EQUALS 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op2 ::= OP_LESSER 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Op2 ::= OP_LESSER_EQUAL 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Op2 ::= OP_GREATER 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Op2 ::= OP_GREATER_EQUAL 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Op3 ::= OP_MUL 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Op3 ::= OP_DIV 
            {
              String RESULT =null;
		//Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		//Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

