/* Eval.java */
/* Generated By:JavaCC: Do not edit this line. Eval.java */
package descending;

import abstractSyntax.*;
import abstractSyntax.expressions.*;
import abstractSyntax.expressions.unary.*;
import abstractSyntax.expressions.binary.*;


public class Eval implements EvalConstants {

  final public Program Prog() throws ParseException {LD lds; LI lis;
    lds = LDs();
    jj_consume_token(15);
    lis = LIs();
    jj_consume_token(0);
{if ("" != null) return Builder.prog(lds, lis);}
    throw new Error("Missing return statement in function");
  }

  final public LD LDs() throws ParseException {LDSimp d; LD pdec;
    d = D();
    pdec = PDec(d);
{if ("" != null) return pdec;}
    throw new Error("Missing return statement in function");
  }

  final public LD PDec(LD ah0) throws ParseException {LDSimp d; LD ah1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      jj_consume_token(16);
      d = D();
      ah1 = PDec(Builder.ldCompuesta(d.tipoVar(), d.id(), ah0));
{if ("" != null) return ah1;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public LI LIs() throws ParseException {LISimp i; LI pins;
    i = I();
    pins = PIns(i);
{if ("" != null) return pins;}
    throw new Error("Missing return statement in function");
  }

  final public LI PIns(LI ah0) throws ParseException {LISimp i; LI ah1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      jj_consume_token(16);
      i = I();
      ah1 = PIns(Builder.liCompuesta(i.id(), i.exp(), ah0));
{if ("" != null) return ah1;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public LDSimp D() throws ParseException {Token tipo, identificador;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case num:{
      tipo = jj_consume_token(num);
      identificador = jj_consume_token(ID);
{if ("" != null) return (LDSimp) Builder.ldSimple(tipo.image, identificador.image);}
      break;
      }
    case bool:{
      tipo = jj_consume_token(bool);
      identificador = jj_consume_token(ID);
{if ("" != null) return (LDSimp) Builder.ldSimple(tipo.image, identificador.image);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LISimp I() throws ParseException {Token identificador; Exp exp0;
    identificador = jj_consume_token(ID);
    jj_consume_token(17);
    exp0 = Exp0();
{if ("" != null) return (LISimp) Builder.liSimple(identificador.image, exp0);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp0() throws ParseException {Exp exp1, rexp0;
    exp1 = Exp1();
    rexp0 = RExp0(exp1);
{if ("" != null) return rexp0;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RExp0(Exp ah0) throws ParseException {String op0; Exp exp1, ah1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:
    case 19:{
      op0 = Op0();
      exp1 = Exp1();
      ah1 = RExp0(Builder.mkexp(op0, ah0, exp1));
{if ("" != null) return ah1;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String Op0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
{if ("" != null) return "+";}
      break;
      }
    case 19:{
      jj_consume_token(19);
{if ("" != null) return "-";}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp1() throws ParseException {Exp exp2, rexp1;
    exp2 = Exp2();
    rexp1 = RExp1(exp2);
{if ("" != null) return rexp1;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RExp1(Exp ah0) throws ParseException {Exp expn;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      jj_consume_token(and);
      expn = Exp1();
{if ("" != null) return Builder.and(ah0, expn);}
      break;
      }
    case or:{
      jj_consume_token(or);
      expn = Exp2();
{if ("" != null) return Builder.or(ah0, expn);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp2() throws ParseException {Exp exp3, rexp2;
    exp3 = Exp3();
    rexp2 = RExp2(exp3);
{if ("" != null) return rexp2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RExp2(Exp ah0) throws ParseException {String op2; Exp exp3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:{
      op2 = Op2();
      exp3 = Exp3();
{if ("" != null) return Builder.mkexp(op2, ah0, exp3);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String Op2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 20:{
      jj_consume_token(20);
{if ("" != null) return "!=";}
      break;
      }
    case 21:{
      jj_consume_token(21);
{if ("" != null) return "==";}
      break;
      }
    case 22:{
      jj_consume_token(22);
{if ("" != null) return "<";}
      break;
      }
    case 23:{
      jj_consume_token(23);
{if ("" != null) return "<=";}
      break;
      }
    case 24:{
      jj_consume_token(24);
{if ("" != null) return ">";}
      break;
      }
    case 25:{
      jj_consume_token(25);
{if ("" != null) return ">=";}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp3() throws ParseException {Exp exp4, rexp3;
    exp4 = Exp4();
    rexp3 = RExp3(exp4);
{if ("" != null) return rexp3;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RExp3(Exp ah0) throws ParseException {String op3; Exp exp4, rexp3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:
    case 27:{
      op3 = Op3();
      exp4 = Exp4();
      rexp3 = RExp3(Builder.mkexp(op3, ah0, exp4));
{if ("" != null) return rexp3;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return ah0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String Op3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      jj_consume_token(26);
{if ("" != null) return "*";}
      break;
      }
    case 27:{
      jj_consume_token(27);
{if ("" != null) return "/";}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp4() throws ParseException {Exp expn;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:{
      jj_consume_token(19);
      expn = Exp4();
{if ("" != null) return Builder.menosUn(expn);}
      break;
      }
    case not:{
      jj_consume_token(not);
      expn = Exp5();
{if ("" != null) return Builder.not(expn);}
      break;
      }
    case lit_n:
    case v_boolean:
    case ID:
    case 28:{
      expn = Exp5();
{if ("" != null) return expn;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp5() throws ParseException {Exp exp0; Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case lit_n:{
      token = jj_consume_token(lit_n);
{if ("" != null) return Builder.num(token.image);}
      break;
      }
    case v_boolean:{
      token = jj_consume_token(v_boolean);
{if ("" != null) return Builder.bool(token.image);}
      break;
      }
    case ID:{
      token = jj_consume_token(ID);
{if ("" != null) return Builder.id(token.image);}
      break;
      }
    case 28:{
      jj_consume_token(28);
      exp0 = Exp0();
      jj_consume_token(29);
{if ("" != null) return exp0;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public EvalTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x10000,0x6,0xc0000,0xc0000,0x600,0x3f00000,0x3f00000,0xc000000,0xc000000,0x10083900,0x10003100,};
   }

  /** Constructor with InputStream. */
  public Eval(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Eval(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Eval(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EvalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Eval(EvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EvalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                   }
