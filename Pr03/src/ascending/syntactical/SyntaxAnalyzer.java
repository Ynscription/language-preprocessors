
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 03 19:35:05 CEST 2019
//----------------------------------------------------

package ascending.syntactical;

import ascending.lexical.Lexer;
import ascending.lexical.LexicalClass;
import ascending.lexical.LexicalUnit;
import ascending.error.ErrorManager;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 03 19:35:05 CEST 2019
  */
public class SyntaxAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\004\003\000\002\004\005\000" +
    "\002\007\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\003\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\004\004\005\010\001\002\000\004\007" +
    "\ufffc\001\002\000\004\007\073\001\002\000\004\002\072" +
    "\001\002\000\004\010\014\001\002\000\004\007\ufffb\001" +
    "\002\000\006\006\012\010\uffff\001\002\000\006\004\004" +
    "\005\010\001\002\000\004\010\ufffe\001\002\000\004\007" +
    "\016\001\002\000\004\002\001\001\002\000\004\011\022" +
    "\001\002\000\006\002\ufffa\006\020\001\002\000\004\007" +
    "\016\001\002\000\004\002\ufff9\001\002\000\020\007\031" +
    "\013\024\020\030\027\041\031\027\032\025\033\033\001" +
    "\002\000\012\002\ufff7\006\ufff7\012\044\013\046\001\002" +
    "\000\020\007\031\013\024\020\030\027\041\031\027\032" +
    "\025\033\033\001\002\000\040\002\uffdd\006\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\001\002" +
    "\000\006\002\ufff8\006\ufff8\001\002\000\040\002\uffdb\006" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030" +
    "\uffdb\001\002\000\014\007\031\027\041\031\027\032\025" +
    "\033\033\001\002\000\040\002\uffde\006\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\001\002\000" +
    "\040\002\uffe1\006\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\001\002\000\040\002\uffdc\006\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\001\002\000\040\002\uffe6\006\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\030\uffe6\001\002\000\040\002" +
    "\uffee\006\uffee\012\uffee\013\uffee\014\061\015\055\016\uffee" +
    "\017\uffee\021\060\022\064\023\062\024\056\025\057\026" +
    "\063\030\uffee\001\002\000\040\002\uffe0\006\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\001\002" +
    "\000\020\002\ufff0\006\ufff0\012\ufff0\013\ufff0\016\050\017" +
    "\051\030\ufff0\001\002\000\014\002\ufff5\006\ufff5\012\ufff5" +
    "\013\ufff5\030\ufff5\001\002\000\020\007\031\013\024\020" +
    "\030\027\041\031\027\032\025\033\033\001\002\000\010" +
    "\012\044\013\046\030\045\001\002\000\020\007\031\013" +
    "\024\020\030\027\041\031\027\032\025\033\033\001\002" +
    "\000\020\007\ufff4\013\ufff4\020\ufff4\027\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\001\002\000\040\002\uffdf\006\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\001\002" +
    "\000\020\007\ufff3\013\ufff3\020\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\001\002\000\014\002\ufff6\006\ufff6\012\ufff6" +
    "\013\ufff6\030\ufff6\001\002\000\020\007\031\013\024\020" +
    "\030\027\041\031\027\032\025\033\033\001\002\000\020" +
    "\007\031\013\024\020\030\027\041\031\027\032\025\033" +
    "\033\001\002\000\014\002\ufff1\006\ufff1\012\ufff1\013\ufff1" +
    "\030\ufff1\001\002\000\014\002\ufff2\006\ufff2\012\ufff2\013" +
    "\ufff2\030\ufff2\001\002\000\020\007\031\013\024\020\030" +
    "\027\041\031\027\032\025\033\033\001\002\000\020\007" +
    "\uffe4\013\uffe4\020\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\001\002\000\020\007\uffe8\013\uffe8\020\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\001\002\000\020\007\uffec\013\uffec" +
    "\020\uffec\027\uffec\031\uffec\032\uffec\033\uffec\001\002\000" +
    "\020\007\uffeb\013\uffeb\020\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\001\002\000\020\007\uffe5\013\uffe5\020\uffe5\027" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\001\002\000\020\007\uffe9" +
    "\013\uffe9\020\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\001" +
    "\002\000\020\007\uffed\013\uffed\020\uffed\027\uffed\031\uffed" +
    "\032\uffed\033\uffed\001\002\000\020\007\uffea\013\uffea\020" +
    "\uffea\027\uffea\031\uffea\032\uffea\033\uffea\001\002\000\020" +
    "\007\031\013\024\020\030\027\041\031\027\032\025\033" +
    "\033\001\002\000\040\002\uffe7\006\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\001\002\000\024" +
    "\002\uffef\006\uffef\012\uffef\013\uffef\014\061\015\055\016" +
    "\uffef\017\uffef\030\uffef\001\002\000\040\002\uffe2\006\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2" +
    "\001\002\000\040\002\uffe3\006\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\030\uffe3\001\002\000\004\002" +
    "\000\001\002\000\006\006\ufffd\010\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\012\002\005\003\006\005\010\006\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\012\005\010\006\004\001\001\000\002\001\001" +
    "\000\006\004\014\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\020\007\016" +
    "\001\001\000\002\001\001\000\022\010\025\011\022\013" +
    "\037\014\036\016\034\020\033\021\031\022\035\001\001" +
    "\000\004\012\042\001\001\000\010\020\070\021\031\022" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\067\022\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\053\017\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\041\013\037" +
    "\014\036\016\034\020\033\021\031\022\035\001\001\000" +
    "\004\012\042\001\001\000\016\013\046\014\036\016\034" +
    "\020\033\021\031\022\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\052\014\036\016\034\020\033\021\031\022\035\001" +
    "\001\000\014\014\051\016\034\020\033\021\031\022\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\066\020\033\021\031\022\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\065\021\031\022\035\001\001\000" +
    "\002\001\001\000\004\017\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s = getScanner().next_token();
	  System.out.println(((LexicalUnit)s).toString());
	  return  s;

    }


	public void syntax_error(Symbol lex_unit) {
		ErrorManager.syntaxError((LexicalUnit) lex_unit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final SyntaxAnalyzer parser;

  /** Constructor */
  CUP$parser$actions(SyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Sec_Declaracion SECTION_SEPARATOR Sec_Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		//Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		//Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Sec_Declaracion ::= Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sec_Declaracion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sec_Declaracion ::= Declaracion SEMICOLON Sec_Declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sec_Declaracion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaracion ::= Tipo IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipo ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sec_Instruccion ::= Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sec_Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sec_Instruccion ::= Instruccion SEMICOLON Sec_Instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sec_Instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= IDENTIFIER ASSIGNMENT Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp0 ::= Exp0 Op0 Exp1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp0 ::= Exp1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Op0 ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Op0 ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp1 ::= Exp2 OP_AND Exp1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp1 ::= Exp2 OP_OR Exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp1 ::= Exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp2 ::= Exp3 Op2 Exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp2 ::= Exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Op2 ::= OP_DIFFERENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Op2 ::= OP_EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Op2 ::= OP_LESSER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Op2 ::= OP_LESSER_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Op2 ::= OP_GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Op2 ::= OP_GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp3 ::= Exp4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Op3 ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Op3 ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp4 ::= OP_SUB Exp4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp4 ::= OP_NOT Exp5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp4 ::= Exp5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp5 ::= Lit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp5 ::= OPEN_PARENTHESIS Exp0 CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Lit ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lit ::= VALUE_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lit ::= VALUE_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lit ::= LITERAL_NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

